{"version":3,"sources":["components/TodoItem.jsx","hoc/FormControl.jsx","validators/validators.js","components/TodoForm.jsx","components/Todos.jsx","actions/index.js","containers/TodoContainer.jsx","App.js","reducers/todos.js","reducers/index.js","index.js"],"names":["Line","styled","hr","ListItem","div","TodoItem","props","style","textDecoration","completed","onClick","text","Error","span","FormControl","Component","input","meta","touched","error","required","value","undefined","Input","Buttons","Button","button","ButtonHide","ButtonNew","InputField","reduxForm","form","onSubmit","handleSubmit","Field","validate","name","component","type","placeholder","hideCompleted","Todos","todoState","tasks","todos","map","item","id","toggleTodo","todoBody","key","values","console","log","todoInput","addTodo","uuidv4","require","v4","TodoContainer","connect","state","todoReducers","dispatch","AppWrapper","App","initialState","action","todo","filter","t","combineReducers","formReducer","store","createStore","rootReducer","ReactDOM","render","document","getElementById","window"],"mappings":"qmBAGA,IAAMA,EAAOC,IAAOC,GAAV,KASJC,EAAWF,IAAOG,IAAV,KAiBCC,EARE,SAACC,GACd,OACI,kBAACH,EAAD,CAAUI,MAAO,CAACC,eAAgBF,EAAMG,UAAY,eAAiB,QAASC,QAASJ,EAAMI,SACxFJ,EAAMK,KACP,kBAACX,EAAD,Q,8ICtBZ,IAAMY,EAAQX,IAAOY,KAAV,KAcIC,EATK,SAACC,GAAD,OAAe,YAA8B,IAA5BC,EAA2B,EAA3BA,MAAOC,EAAoB,EAApBA,KAASX,EAAW,gCAC5D,OACI,oCACI,kBAACS,EAAD,iBAAeC,EAAWV,IACxBW,EAAKC,SAAWD,EAAKE,MAAS,kBAACP,EAAD,KAAQK,EAAKE,OAAgB,QCZ5DC,EAAW,SAACC,GACrB,OAAQA,OAA4BC,EAApB,qB,2rCCKpB,IAAMC,EAAQtB,IAAOe,MAAV,KAkBLQ,EAAUvB,IAAOG,IAAV,KAQPqB,EAASxB,IAAOyB,OAAV,KAYNC,EAAa1B,YAAOwB,EAAPxB,CAAH,KAKV2B,EAAY3B,YAAOwB,EAAPxB,CAAH,KAKX4B,EAAaf,EAAYS,GAcdO,cAAU,CAACC,KAAM,YAAjBD,EAZE,SAACxB,GACd,OACI,0BAAM0B,SAAU1B,EAAM2B,cAClB,kBAACC,EAAA,EAAD,CAAOC,SAAU,CAACf,GAAWgB,KAAK,YAAYC,UAAWR,EAAYS,KAAK,OAAOC,YAAY,0BAC7F,kBAACf,EAAD,KACI,kBAACG,EAAD,CAAYjB,QAASJ,EAAMkC,eAA3B,kBACA,kBAACZ,EAAD,sBC/BDa,EA3BD,SAAAnC,GACV,IAAIoC,EAAYpC,EAAMqC,MAAMC,MAMxBA,EAAQF,EAAUG,KAAI,SAACC,GAAD,OAAU,kBAAC,EAAD,CAAUpC,QAAS,kBAJrCqC,EAIsDD,EAAKC,QAHzEzC,EAAM0C,WAAWD,GADJ,IAACA,GAIgEtC,UAAWqC,EAAKrC,UAAWE,KAAMmC,EAAKG,SAAUC,IAAKJ,EAAKC,QAW5I,OACI,oCACKH,EACD,kBAAC,EAAD,CAAUJ,cAPE,WAChBlC,EAAMkC,iBAOQR,SAbH,SAACmB,GACZC,QAAQC,IAAIF,EAAOG,WACnBhD,EAAMiD,QAAQJ,EAAOG,gBCflBE,EAAUC,EAAQ,KAAtBC,GCoBQC,EAFOC,aAdE,SAACC,GACrB,MAAO,CACHlB,MAAOkB,EAAMC,iBAIM,SAACC,GACxB,MAAO,CACHR,QAAS,SAACN,GAAD,OAAcc,EDVR,SAACd,GAAD,MAAe,CACnCX,KAAM,WACNW,WACAF,GAAIS,KCOiCD,CAAQN,KACxCD,WAAY,SAACD,GAAD,OAAQgB,EDLF,SAAAhB,GAAE,MAAK,CAC9BT,KAAM,cACNS,GAAIA,GCG8BC,CAAWD,KACxCP,cAAe,kBAAMuB,EDDO,CACjCzB,KAAM,uBCIasB,CAA6CnB,G,6NCdnE,IAAMuB,EAAa/D,IAAOG,IAAV,KAeD6D,EAPH,WACR,OACC,kBAACD,EAAD,KACI,kBAAC,EAAD,Q,uBCfLE,EAAe,CACftB,MAAO,IA2BIkB,EAxBM,WAAmC,IAAlCD,EAAiC,uDAAzBK,EAAcC,EAAW,uCACnD,OAAQA,EAAO7B,MACX,IAAK,WACD,OAAO,eACAuB,EADP,CAEIZ,SAAUkB,EAAOlB,SACjBL,MAAM,GAAD,mBAAMiB,EAAMjB,OAAZ,CAAmB,CAACK,SAAUkB,EAAOlB,SAAUxC,WAAW,EAAOsC,GAAIoB,EAAOpB,QAEzF,IAAK,cACD,OAAO,eACAc,EADP,CAEIjB,MAAOiB,EAAMjB,MAAMC,KAAI,SAAAuB,GAAI,OACtBA,EAAKrB,KAAOoB,EAAOpB,GAApB,eAA+BqB,EAA/B,CAAsC3D,WAAY2D,EAAK3D,YAAY2D,OAG/E,IAAK,iBACD,OAAO,eACAP,EADP,CAEIjB,MAAOiB,EAAMjB,MAAMyB,QAAO,SAAAC,GAAC,OAAKA,EAAE7D,eAE1C,QAAS,OAAOoD,I,SCpBTU,cAAgB,CAC3BT,eACA/B,KAAMyC,MCEJC,EAAQC,YAAYC,GAE1BC,IAASC,OACP,kBAAC,IAAD,CAAUJ,MAAOA,GACf,kBAAC,EAAD,OAEFK,SAASC,eAAe,SAG1BC,OAAOP,MAAQA,G","file":"static/js/main.c071bc8a.chunk.js","sourcesContent":["import React from \"react\";\r\nimport styled from 'styled-components';\r\n\r\nconst Line = styled.hr`\r\n    width: 10%;\r\n    border: none;\r\n    margin-left: 0;\r\n    color: rgba(0,0,0,0.5);\r\n    height: 1px;\r\n    background-color: rgba(0,0,0,0.5);\r\n`;\r\n\r\nconst ListItem = styled.div`\r\n    font-family: Roboto;\r\n    font-style: normal;\r\n    font-weight: normal;\r\n    font-size: 24px;\r\n    line-height: 28px;\r\n    cursor: pointer;\r\n`;\r\n\r\nconst TodoItem = (props) => {\r\n    return (\r\n        <ListItem style={{textDecoration: props.completed ? 'line-through' : 'none'}} onClick={props.onClick}>\r\n            {props.text}\r\n            <Line/>\r\n        </ListItem>\r\n    );\r\n}\r\nexport default TodoItem;\r\n","import React from \"react\";\r\nimport styled from 'styled-components';\r\n\r\nconst Error = styled.span`\r\n    color: #FF5722;\r\n    font-weight: bold;\r\n`\r\n\r\nconst FormControl = (Component) => ({input, meta, ...props}) => {\r\n    return (\r\n        <>\r\n            <Component {...input} {...props}/>\r\n            {(meta.touched && meta.error) ? <Error>{meta.error}</Error>: null}\r\n         </>\r\n    )\r\n}\r\n\r\nexport default FormControl;","export const required = (value) => {\r\n    return !value ? 'Field is required':undefined;\r\n}","import React from \"react\";\r\nimport styled from 'styled-components';\r\nimport {Field, reduxForm} from \"redux-form\";\r\nimport FormControl from \"../hoc/FormControl\";\r\nimport {required} from \"../validators/validators\";\r\n\r\nconst Input = styled.input`\r\n    display: block;\r\n    width: 100%;\r\n    background: inherit;\r\n    border-top: none;\r\n    border-left: none;\r\n    border-right: none;\r\n    outline: none;\r\n    border-bottom: 1px solid;\r\n    color: rgba(0, 0, 0, 0.4);\r\n    font-family: Roboto;\r\n    font-style: normal;\r\n    font-weight: normal;\r\n    font-size: 18px;\r\n    line-height: 21px;\r\n    margin-top: 60px;\r\n`;\r\n\r\nconst Buttons = styled.div`\r\n    display: flex;\r\n    justify-content: space-evenly;\r\n    margin-top: 14px;\r\n    outline: none;\r\n    border: none;\r\n`;\r\n\r\nconst Button = styled.button`\r\n    font-family: 'Roboto', sans-serif;\r\n    font-style: normal;\r\n    font-weight: 300;\r\n    font-size: 16px;\r\n    line-height: 19px;\r\n    box-shadow: 2px 2px 5px rgba(0, 0, 0, 0.25);\r\n    border: none;\r\n    border-radius: 8px;\r\n    cursor: pointer;\r\n`;\r\n\r\nconst ButtonHide = styled(Button)`\r\n    background: #FFE482;\r\n    padding: 11px 10px 10px 12px;\r\n`;\r\n\r\nconst ButtonNew = styled(Button)`\r\n    background: #FFFFFF;\r\n    padding: 11px 37px 10px 35px;\r\n`;\r\n\r\nlet InputField = FormControl(Input);\r\n\r\nconst TodoForm = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <Field validate={[required]} name='todoInput' component={InputField} type=\"text\" placeholder=\"Enter a new todo item\"/>\r\n            <Buttons>\r\n                <ButtonHide onClick={props.hideCompleted}>Hide completed</ButtonHide>\r\n                <ButtonNew>Add todo</ButtonNew>\r\n            </Buttons>\r\n        </form>\r\n    );\r\n};\r\n\r\nexport default reduxForm({form: 'todoForm'})(TodoForm);","import React from 'react';\r\nimport TodoItem from \"./TodoItem\";\r\nimport TodoForm from \"./TodoForm\";\r\n\r\nconst Todos = props => {\r\n    let todoState = props.tasks.todos;\r\n\r\n    let toggleTodo = (id) => {\r\n        props.toggleTodo(id);\r\n    }\r\n\r\n    let todos = todoState.map((item) => <TodoItem onClick={() => toggleTodo(item.id)} completed={item.completed} text={item.todoBody} key={item.id}/>);\r\n\r\n    let onSubmit = (values) => {\r\n        console.log(values.todoInput)\r\n        props.addTodo(values.todoInput)\r\n    }\r\n\r\n    let hideCompleted = () => {\r\n        props.hideCompleted();\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {todos}\r\n            <TodoForm hideCompleted={hideCompleted}\r\n                      onSubmit={onSubmit}/>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Todos;","const {v4: uuidv4} = require('uuid');\r\n\r\nexport const addTodo = (todoBody) => ({\r\n   type: 'ADD_TODO',\r\n   todoBody,\r\n   id: uuidv4(),\r\n});\r\n\r\nexport const toggleTodo = id => ({\r\n   type: 'TOGGLE_TODO',\r\n   id: id\r\n})\r\n\r\nexport const hideCompleted = () => ({\r\n   type: 'HIDE_COMPLETED',\r\n})","import {connect} from \"react-redux\";\r\nimport Todos from \"../components/Todos\";\r\nimport {addTodo, hideCompleted, toggleTodo} from \"../actions\";\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        tasks: state.todoReducers\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        addTodo: (todoBody) => dispatch(addTodo(todoBody)),\r\n        toggleTodo: (id) => dispatch(toggleTodo(id)),\r\n        hideCompleted: () => dispatch(hideCompleted())\r\n    }\r\n}\r\n\r\nconst TodoContainer = connect(mapStateToProps, mapDispatchToProps)(Todos)\r\n\r\nexport default TodoContainer;","import React from 'react';\nimport styled from 'styled-components';\nimport TodoContainer from \"./containers/TodoContainer\";\n\nconst AppWrapper = styled.div`\n    max-width: 650px;\n    margin: 20% auto;\n    padding: 25px 50px 13px 50px;\n    background: rgba(255, 255, 255, 0.67);\n    border-radius: 8px;\n`;\n\nconst App = () => {\n    return (\n     <AppWrapper>\n         <TodoContainer/>\n     </AppWrapper>\n    )\n};\nexport default App;\n","let initialState = {\r\n    todos: [],\r\n}\r\n\r\nconst todoReducers = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case 'ADD_TODO':\r\n            return {\r\n                ...state,\r\n                todoBody: action.todoBody,\r\n                todos: [...state.todos, {todoBody: action.todoBody, completed: false, id: action.id}]\r\n            }\r\n        case 'TOGGLE_TODO':\r\n            return {\r\n                ...state,\r\n                todos: state.todos.map(todo =>\r\n                    (todo.id === action.id) ? { ...todo,  completed: !todo.completed}: todo\r\n                )\r\n            };\r\n        case 'HIDE_COMPLETED':\r\n            return {\r\n                ...state,\r\n                todos: state.todos.filter(t => !t.completed)\r\n            }\r\n        default: return state;\r\n    }\r\n};\r\n\r\nexport default todoReducers;\r\n","import {combineReducers} from 'redux';\r\nimport todoReducers from './todos';\r\nimport { reducer as formReducer } from 'redux-form';\r\n\r\nexport default combineReducers({\r\n    todoReducers,\r\n    form: formReducer\r\n})\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport rootReducer from './reducers'\nimport {createStore} from 'redux';\nimport {Provider} from 'react-redux';\n\nconst store = createStore(rootReducer);\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\nwindow.store = store\n"],"sourceRoot":""}